name: 🚀 Deploy Simples Barbear.IA

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Forçar rebuild completo'
        required: false
        default: 'false'
        type: boolean

jobs:
  deploy:
    name: 📦 Deploy para OCI
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout do código
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: 📦 Instalar dependências
      run: npm ci
    
    - name: 🏗️ Build da aplicação
      run: npm run build
    
    - name: 🚀 Deploy via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.OCI_HOST }}
        username: ${{ secrets.OCI_USERNAME }}
        key: ${{ secrets.OCI_SSH_KEY }}
        script: |
          set -e
          
          echo "🔄 Iniciando deploy simples..."
          
          # Navegar para o diretório do projeto
          cd /var/www/Barbear.IA || { echo "❌ Diretório não encontrado"; exit 1; }
          
          # Parar container atual se existir
          if docker-compose ps | grep -q barbear-ia-frontend; then
            echo "⏹️ Parando container atual..."
            docker-compose down
          fi
          
          # Fazer backup do código atual
          if [ -d "backup" ]; then
            rm -rf backup.old
            mv backup backup.old
          fi
          mkdir -p backup
          cp -r dist backup/ 2>/dev/null || echo "ℹ️ Nenhum dist anterior para backup"
          
          # Atualizar código do repositório
          echo "📥 Atualizando código..."
          git fetch origin
          git reset --hard origin/main
          
          # Rebuild apenas se solicitado
          if [ "${{ inputs.force_rebuild }}" = "true" ]; then
            echo "🔨 Rebuild forçado - removendo imagens..."
            docker-compose down --rmi all --volumes --remove-orphans || true
            docker system prune -f || true
          fi
          
          # Subir a aplicação
          echo "🚀 Iniciando aplicação..."
          docker-compose up -d --build
          
          # Aguardar alguns segundos para inicialização
          sleep 10
          
          # Verificar se está funcionando
          if curl -f -s http://localhost:3500/ > /dev/null; then
            echo "✅ Deploy concluído com sucesso!"
            echo "🌐 Aplicação disponível em: http://localhost:3500"
          else
            echo "❌ Falha na verificação de saúde"
            echo "🔄 Tentando rollback..."
            
            # Rollback simples
            docker-compose down
            if [ -d "backup/dist" ]; then
              rm -rf dist
              cp -r backup/dist .
              docker-compose up -d
              echo "🔄 Rollback executado"
            fi
            exit 1
          fi
          
          # Limpeza básica
          docker image prune -f || true
          
          echo "🎉 Deploy finalizado!"

    - name: 🔔 Notificar resultado
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ Deploy realizado com sucesso!"
        else
          echo "❌ Deploy falhou - verifique os logs"
        fi